# common stuff for all my builds. activates a bunch of fragments.
source common-rpardini.conf

###
### Configuration. Points to the board, which has all the HW specific details.
###
export BOARD=x86uefi # a new 'board'. you'll soon discover truths.
export WIREGUARD=no  # No wireguard for this build. Why? Ask me later
export BRANCH=edge   # 5.11

# Use dual root hack with lvm marker
add_fragment "dual-root-lvm"

# Include a rootfs image in the real root.
# During runtime, you're supposed to write it to the fake root partition, then copy the dump inside.
# and then run update-grub to boot it from the fake root; there, you can re-dump again and again.
add_fragment "rootfs_e2img_inside_rootfs"

# Output should be qcow2
add_fragment "image-output-qcow2"

# shellcheck disable=SC2155
export CLOUD_INIT_EXTRA_VERSION="dualroot-$(date +%Y%m%d%H%M%S)"

# Use a huge fixed image size. 24Gb will result in around 16/8gb root/fake
export DUAL_ROOT_FIXED_IMAGE_SIZE_GB=24 # In Gb. Go ask Oracle why

user_config__100_use_cloud_serial_console() {
	export SERIALCON="ttyS0" # For Oracle VMs on AMD micro stuff

	# this will go in grub.d config, so Grub displays on serial console only
	export UEFI_GRUB_TERMINAL="serial"

	# Bump the grub timeout so we have plenty of time to connect to it
	export UEFI_GRUB_TIMEOUT=60
}

user_config__600_use_boot_for_cloudinit_config() {
	export CLOUD_INIT_CONFIG_LOCATION="/boot" # use /boot for cloud-init as well
}

# Currently this is all, or mostly, fake.
# The second root partition will be there, but empty.
# After the first "real" root boot, you have to setup the second root
# manually before actually using it:
# e2image -rap rootfs.e2img /dev/vda3 # write the dump there
# tune2fs -U /dev/vda3 # change the UUID so grub does not go crazy
# mount; copy rootfs.e2img to vda3/root # so we can actually overwrite it later
# edit vda/etc/fstab to point to new uuid
# umount, run update-grub, os-prober stuff should do its magic by then

# @TODO: last idea was to
# 1) make a normal (non-dual-root) build output a .e2img in output dir
# 2) during this (dual-root), extract that into vda3
# 3) chainload grub there via 'configfile'

# @TODO but of course that is a lot of work, and we'll have to edit anyway?
# Maybe:
# Do everything as normal, including rootfs-in-rootfs (just keep it at .tmp)
# Extract e2img into vda3. This has duplicated uuid now... we have to change everywhere
# tune2fs the UUID for vda3, Mount the vda3 chroot, run update-grub again with new UUID
# include e2img into vda3 /root/ then
